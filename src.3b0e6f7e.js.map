{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","document","querySelector","timer","timerComponents","time","days","pad","Math","floor","hours","mins","sec","value","String","padStart","intervalId","setInterval","currentTime","Date","now","deltaTime","times","clearInterval","children","map","el","firstElementChild","dataset","textContent"],"mappings":";;;AAyDA,aAzDA,QAAA,oBAEA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACfD,KAAAA,SAAWE,SAASC,iBAAiBH,KACrCC,KAAAA,WAAaA,EACbG,KAAAA,QAGTC,gBAAgBC,GAOL,MAAA,CAACC,KALK,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAK3BK,MAJA,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAI/CM,KAHR,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGnCO,IAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK3DE,IAAIM,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrCZ,QACUa,MAAAA,EAAaC,YAAY,KACrBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKrB,WAAakB,EAC9BI,EAAQ,KAAKlB,gBAAgBiB,GAC/BA,GAAa,EACbE,cAAcP,GAGH,IAAI,KAAKjB,SAASyB,UAC1BC,IAAKC,IACFb,MAAAA,EAAQa,EAAGC,kBAAkBC,QAAQf,MAC5B,SAAVA,IACDa,EAAGC,kBAAkBE,YAAcP,EAAMhB,MAE9B,UAAVO,IACDa,EAAGC,kBAAkBE,YAAcP,EAAMZ,OAE9B,SAAVG,IACDa,EAAGC,kBAAkBE,YAAcP,EAAMX,MAE9B,SAAVE,IACDa,EAAGC,kBAAkBE,YAAcP,EAAMV,QAGlD,MAST,IAAIf,EAAe,CACnBE,SAAU,WACVC,WAAY,IAAImB,KAAK","file":"src.3b0e6f7e.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n      this.selector = document.querySelector(`${selector}`);\n      this.targetDate = targetDate;\n      this.timer();\n  };\n\n  timerComponents(time) {\n      \n      const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const sec = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n      return {days, hours, mins, sec }\n  }\n\n  pad(value) {\n      return String(value).padStart(2, \"0\");\n  };\n\n  timer() {\n      const intervalId = setInterval(() => {\n          const currentTime = Date.now();\n          const deltaTime = this.targetDate - currentTime;\n          const times = this.timerComponents(deltaTime)\n          if (deltaTime <= 0) {\n              clearInterval(intervalId);\n              return\n          }\n          const fields = [...this.selector.children];\n          fields.map((el) => {\n              const value = el.firstElementChild.dataset.value;\n               if (value === \"days\") {\n                  el.firstElementChild.textContent = times.days;\n              };\n               if (value === \"hours\") {\n                  el.firstElementChild.textContent = times.hours;\n              };\n               if (value === \"mins\") {\n                  el.firstElementChild.textContent = times.mins;\n              };\n               if (value === \"secs\") {\n                  el.firstElementChild.textContent = times.sec;\n              };\n          })\n      }, 1000)\n  }\n};\n\n\n\n\n\n\nnew CountdownTimer({\nselector: '#timer-1',\ntargetDate: new Date(\"Aug 20, 2090 10:00:00\"),\n});"]}